/*
Input: s = "abacaba"
Output: 4
Explanation:
Two possible partitions are ("a","ba","cab","a") and ("ab","a","ca","ba").
It can be shown that 4 is the minimum number of substrings needed.
Example 2:

Input: s = "ssssss"
Output: 6
Explanation:
The only valid partition is ("s","s","s","s","s","s").
*/

class Solution {
    public int partitionString(String s) {
        
        int count=0 ;
        Set<Character> set= new HashSet<Character>();
        for(int i = 0 ; i <= s.length()- 1 ; i++ ){
            if(set.contains(s.charAt(i))){
                count++;
                set.clear();
            }
            set.add(s.charAt(i));
           
        }
     return count+1;
    }
}
